# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ka_hasher.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os, hashlib
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        self.selected_file_path = None
        self.clipboard_txt = None
        self.hash_type_all = ["MD5", "SHA1", "SHA256", "SHA512"]
        self.current_hash_type_index = 0
        QtWidgets.QApplication.clipboard().dataChanged.connect(self.on_clipboard_change)

    def get_hash_type(self):
        return self.hash_type_all[self.current_hash_type_index]

    def next_hash_type(self):
        self.current_hash_type_index = (self.current_hash_type_index + 1) % len(self.hash_type_all)
        if self.selected_file_path:
            self.hash_result_label.setText(self.calculate_file_checksum(self.selected_file_path))
        self.next_hash_button.setText(self.hash_type_all[self.current_hash_type_index])

    def get_file_name(self, fp):
        return fp.split(os.sep)[-1]

    def get_file_checksum(self, fp, hash_func):
        with open(fp, mode='rb') as f:
            for chunk in iter(f.read(1024)):
                hash_func.update(bytes(chunk))
            checksum = hash_func.hexdigest()
        return checksum

    def calculate_file_checksum(self, fp):
        if self.get_hash_type().lower() == "md5":
            md5 = hashlib.md5()
            return self.get_file_checksum(fp, hash_func=md5)
        if self.get_hash_type().lower() == "sha1":
            sha1 = hashlib.sha1()
            return self.get_file_checksum(fp, hash_func=sha1)
        elif self.get_hash_type().lower() == "sha256":
            sha256 = hashlib.sha256()
            return self.get_file_checksum(fp, hash_func=sha256)
        elif self.get_hash_type().lower() == "sha512":
            sha512 = hashlib.sha512()
            return self.get_file_checksum(fp, hash_func=sha512)
        else:
            raise ValueError('Choose a valid hash type [md5, sha1, sha256, sha512 ]')

    def on_push_import_button(self):
        fp = QtWidgets.QFileDialog.getOpenFileName()[0]
        self.selected_file_path = fp
        if fp:
            self.on_push_reset_button()
            f_name = self.get_file_name(fp)
            self.filename_label.setText(f_name)
            self.file_extension_label.setText(f_name.split('.')[-1])
            self.hash_result_label.setText(self.calculate_file_checksum(fp))
            self.compare_tips_label.setText("Ctrl+c copy original hash to clipboard to compare")
        else:
            pass

    def on_push_next_hash_button(self):
        self.current_hash_type_index = (self.current_hash_type_index + 1) % len(self.hash_type_all)
        next_hash_type_index = (self.current_hash_type_index + 1) % len(self.hash_type_all)
        if self.selected_file_path:
            self.hash_result_label.setText(self.calculate_file_checksum(self.selected_file_path))
        self.current_hash_label.setText(self.hash_type_all[self.current_hash_type_index])
        self.next_hash_label.setText(self.hash_type_all[next_hash_type_index])

    def on_clipboard_change(self):
        self.clipboard_txt = QtWidgets.QApplication.clipboard().text()
        if self.clipboard_txt == self.hash_result_label.text():
            self.compare_result_label.setText("Perfect match with clipboard !")
            self.compare_result_label.setStyleSheet("color: rgb(236, 193, 18)")
        else:
            self.compare_result_label.setText("Mismatch with clipboard !")
            self.compare_result_label.setStyleSheet("color: rgb(227, 75, 57)")
        self.compare_tips_label.setText("")

    def on_push_reset_button(self):
        self.file_extension_label.setText(":)")
        self.filename_label.setText("Hashinator !")
        self.hash_result_label.setText("Result")
        self.compare_result_label.setText("")
        self.compare_tips_label.setText("")

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setGeometry(QtCore.QRect(100, 200, 703, 491))
        MainWindow.setFixedSize(703, 478)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 721, 491))
        self.frame.setStyleSheet("background-color: rgb(242, 250, 252)")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.file_extension_label = QtWidgets.QLabel(self.frame)
        self.file_extension_label.setGeometry(QtCore.QRect(305, 10, 100, 100))
        self.file_extension_label.setStyleSheet("background-color: rgb(236, 193, 18);\n"
                                                "color: rgb(255, 255, 255);\n"
                                                "border-radius: 50%;\n"
                                                "font-size: 20pt;")
        self.file_extension_label.setAlignment(QtCore.Qt.AlignCenter)
        self.file_extension_label.setObjectName("file_extension_label")
        self.filename_label = QtWidgets.QLabel(self.frame)
        self.filename_label.setGeometry(QtCore.QRect(-10, 120, 731, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.filename_label.setFont(font)
        self.filename_label.setStyleSheet("color: rgb(42, 129, 165);")
        self.filename_label.setAlignment(QtCore.Qt.AlignCenter)
        self.filename_label.setObjectName("filename_label")
        self.import_button = QtWidgets.QPushButton(self.frame)
        self.import_button.clicked.connect(self.on_push_import_button)
        self.import_button.setGeometry(QtCore.QRect(310, 350, 101, 36))
        self.import_button.setStyleSheet("QPushButton {\n"
                                         "    background-color: rgb(42, 129, 165);\n"
                                         "    border: 1px soli    d;\n"
                                         "    color: white;\n"
                                         "}\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: rgb(36, 114, 144)\n"
                                         "}")
        self.import_button.setObjectName("import_button")
        self.hash_result_label = QtWidgets.QLabel(self.frame)
        self.hash_result_label.setGeometry(QtCore.QRect(20, 250, 681, 61))
        self.hash_result_label.setStyleSheet("font-size: 13pt;\n"
                                             "color: rgb(42, 129, 165);")
        self.hash_result_label.setWordWrap(True)
        self.hash_result_label.setObjectName("hash_result")
        self.next_hash_button = QtWidgets.QPushButton(self.frame)
        self.next_hash_button.setGeometry(QtCore.QRect(330, 190, 51, 36))
        self.next_hash_button.setStyleSheet("\n"
                                            "\n"
                                            "QPushButton {\n"
                                            "    background-color: rgb(255, 255, 255);\n"
                                            "    border: 0 solid;\n"
                                            "}\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "    background-color: rgb(237, 237, 237);\n"
                                            "}")
        self.next_hash_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("swap_horiz-24px.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.next_hash_button.setIcon(icon)
        self.next_hash_button.setObjectName("next_hash_button")
        self.next_hash_button.clicked.connect(self.on_push_next_hash_button)
        self.current_hash_label = QtWidgets.QLabel(self.frame)
        self.current_hash_label.setGeometry(QtCore.QRect(20, 190, 81, 41))
        self.current_hash_label.setStyleSheet("color: rgb(42, 129, 165);")
        self.current_hash_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.current_hash_label.setObjectName("current_hash_label")
        self.next_hash_label = QtWidgets.QLabel(self.frame)
        self.next_hash_label.setGeometry(QtCore.QRect(620, 190, 81, 41))
        self.next_hash_label.setStyleSheet("color: rgb(42, 129, 165);")
        self.next_hash_label.setAlignment(QtCore.Qt.AlignCenter)
        self.next_hash_label.setObjectName("next_hash_label")
        self.compare_result_label = QtWidgets.QLabel(self.frame)
        self.compare_result_label.setGeometry(QtCore.QRect(10, 20, 231, 71))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.compare_result_label.setFont(font)
        self.compare_result_label.setStyleSheet("font-size: 12pt;\n"
                                                "color: rgb(212, 170, 0)")
        self.compare_result_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.compare_result_label.setObjectName("compare_result_label")
        self.reset_button = QtWidgets.QPushButton(self.frame)
        self.reset_button.clicked.connect(self.on_push_reset_button)
        self.reset_button.setGeometry(QtCore.QRect(10, 420, 101, 36))
        self.reset_button.setStyleSheet("\n"
                                        "QPushButton {\n"
                                        "    background-color: rgb(236, 193, 18);\n"
                                        "    border: 1px soli    d;\n"
                                        "    color: white;\n"
                                        "\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: rgb(212, 170, 0);\n"
                                        "}")
        self.reset_button.setObjectName("reset_button")
        self.compare_tips_label = QtWidgets.QLabel(self.frame)
        self.compare_tips_label.setGeometry(QtCore.QRect(420, 410, 271, 61))
        self.compare_tips_label.setObjectName("compare_tips_label")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "KaHaShEr"))
        self.file_extension_label.setText(_translate("MainWindow", ":)"))
        self.filename_label.setToolTip(_translate("MainWindow", "<html><head/><body><p>Filename</p></body></html>"))
        self.filename_label.setText(_translate("MainWindow", "Hashinator !"))
        self.import_button.setToolTip(
            _translate("MainWindow", "<html><head/><body><p>Select your file to get hash value</p></body></html>"))
        self.import_button.setText(_translate("MainWindow", "Import"))
        self.hash_result_label.setText(_translate("MainWindow", "Result"))
        self.next_hash_button.setToolTip(_translate("MainWindow",
                                                    "<html><head/><body><p>Swicth between hash type [MD5, SHA1, SHA256 etc ...]</p></body></html>"))
        self.current_hash_label.setToolTip(
            _translate("MainWindow", "<html><head/><body><p>Current hash type</p></body></html>"))
        self.current_hash_label.setText(_translate("MainWindow", "MD5"))
        self.next_hash_label.setToolTip(
            _translate("MainWindow", "<html><head/><body><p>Next hash type</p></body></html>"))
        self.next_hash_label.setText(_translate("MainWindow", "SHA1"))
        self.compare_result_label.setText(_translate("MainWindow", ""))
        self.reset_button.setToolTip(_translate("MainWindow", "<html><head/><body><p>Reset</p></body></html>"))
        self.reset_button.setText(_translate("MainWindow", "Reset"))
        self.compare_tips_label.setText(_translate("MainWindow", ""))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
