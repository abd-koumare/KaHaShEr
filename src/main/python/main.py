# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'KaHaShEr.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os, hashlib, string
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia
from fbs_runtime.application_context.PyQt5 import ApplicationContext, cached_property


class GetFileHashThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(str)
    loading = QtCore.pyqtSignal(int)

    def __init__(self, file_path, hash_func):
        super(GetFileHashThread, self).__init__(parent=None)
        self.file_path, self.hash_func = file_path, hash_func

    def run(self):

        with open(file=self.file_path, mode='rb') as file:
            file_size = os.path.getsize(self.file_path)

            already_hash, total_chunk = 0, file_size // 4096 or 1
            for chunk in iter(lambda: file.read(4096), b''):
                self.hash_func.update(chunk)
                already_hash += 1
                self.loading.emit((already_hash * 100) // total_chunk)
            self.finished.emit(self.hash_func.hexdigest())


class AppContext(ApplicationContext):
    @cached_property
    def swap_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/swap.svg'))

    @cached_property
    def checked_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/checked.svg'))

    @cached_property
    def x_mark_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/x-mark.svg'))

    @cached_property
    def bulb_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/bulb.svg'))

    @cached_property
    def people_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/people.png'))

    @cached_property
    def import_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/import.svg'))

    @cached_property
    def reset_icon(self):
        return QtGui.QPixmap(self.get_resource('icons/reset.svg'))

    @cached_property
    def success_sound(self):
        return self.get_resource('sounds/success.wav')

    @cached_property
    def error_sound(self):
        return self.get_resource('sounds/error.wav')


''' Global variables '''

last_open_directory = None
selected_file_path = None
current_clipboard_txt_val = None
hash_type_all = ["MD5", "SHA1", "SHA256", "SHA512"]
current_hash_type_index = 0
clipboard_changed_from_app = False

''' Util functions '''


def get_hash_type():
    global hash_type_all, current_hash_type_index
    return hash_type_all[current_hash_type_index]


def get_hash_func():
    if get_hash_type().lower() == "sha1":
        return hashlib.sha1()
    if get_hash_type().lower() == "sha256":
        return hashlib.sha256()
    if get_hash_type().lower() == "sha512":
        return hashlib.sha512()
    return hashlib.md5()


def is_hex(s):
    return all(char in string.hexdigits for char in s)


def format_hash_result(txt, block_n=64):
    if block_n >= len(txt):
        return txt
    fmt_txt, txt_length = '', len(txt)
    for x in range(txt_length // block_n):
        fmt_txt += txt[:block_n] + ' '
        txt = txt[block_n:txt_length]
    return fmt_txt


def undo_format_hash_result(txt):
    return ''.join([char for char in txt if char != ' '])


class Ui_MainWindow(object):

    def __init__(self):
        self.thread = None
        self.app_context = AppContext()

    def ui_set_success_compare(self):
        _translate = QtCore.QCoreApplication.translate
        self.compare_result_label.setText(_translate("MainWindow", 'Perfect match'))
        self.compare_result_label.setVisible(True)
        self.compare_result_icon.setVisible(True)
        self.compare_result_icon.setPixmap(self.app_context.checked_icon)
        self.compare_result_label.setStyleSheet("font-weight: bold; font-size: 12pt; color: rgb(95, 211, 141)")
        QtMultimedia.QSound.play(self.app_context.success_sound)

    def ui_set_error_compare(self):
        _translate = QtCore.QCoreApplication.translate
        self.compare_result_label.setText(_translate("MainWindow", 'Do not match'))
        self.compare_result_label.setVisible(True)
        self.compare_result_icon.setVisible(True)
        self.compare_result_icon.setPixmap(self.app_context.x_mark_icon)
        self.compare_result_label.setStyleSheet("font-weight: bold;font-size: 12pt; color: rgb(198, 54, 54)")
        QtMultimedia.QSound.play(self.app_context.error_sound)

    def ui_hide_compare_result(self):
        self.compare_result_label.setVisible(False)
        self.compare_result_icon.setVisible(False)

    def ui_set_compare_tip_visibility(self, show):
        _translate = QtCore.QCoreApplication.translate
        self.compare_tips_label.setText(_translate("MainWindow", "Copy the hash value in the clipboard to compare"))
        self.compare_tip_icon_label.setVisible(show)
        self.compare_tips_label.setVisible(show)

    def ui_set_hash_copy_info_visibility(self, show):
        _translate = QtCore.QCoreApplication.translate
        self.hash_copy_info.setText(_translate("MainWindow", "Successfully copied!"))
        self.hash_copy_info.setVisible(show)
        self.hash_copy_info.setStyleSheet("font-weight: bold; font-size: 12pt; color: rgb(95, 211, 141)")

    def ui_set_hash_result(self, hash_result):
        self.hash_result_label.setText(format_hash_result(hash_result))
        global selected_file_path
        self.ui_set_filename(selected_file_path)
        self.ui_show_hash_process_button()

    def ui_set_filename(self, status):
        self.filename_label.setText(status)
        self.filename_label.setStyleSheet("font-weight: bold;\n"
                                          "color: rgb(138, 146, 167);")

    def ui_set_progression(self, value):
        self.filename_label.setText(str(value) + "%")
        self.filename_label.setStyleSheet("font-weight: bold;\n"
                                          "color: rgb(138, 146, 167);")

    def ui_show_hash_process_button(self):
        self.import_button.setVisible(True)
        self.next_hash_button.setVisible(True)
        self.reset_button.setVisible(True)

    def ui_hide_hash_process_button(self):
        self.import_button.setVisible(False)
        self.next_hash_button.setVisible(False)
        self.reset_button.setVisible(False)

    def run_file_hash_thread(self, fp, hash_func):
        # hide button which will impact hashing process
        self.ui_hide_hash_process_button()

        self.stop_file_hash_thread()
        self.thread = GetFileHashThread(fp, hash_func)
        self.thread.start()
        self.thread.loading.connect(self.ui_set_progression)
        self.thread.finished.connect(self.ui_set_hash_result)

    def stop_file_hash_thread(self):
        if self.thread and self.thread.isRunning():
            self.thread.exit()

    def on_push_import_button(self):
        global selected_file_path, last_open_directory, current_clipboard_txt_val
        user_download_path = QtCore.QStandardPaths.standardLocations(QtCore.QStandardPaths.DownloadLocation)[0]

        if last_open_directory:
            fp = QtWidgets.QFileDialog(directory=last_open_directory).getOpenFileName()[0]
        else:
            fp = QtWidgets.QFileDialog(directory=user_download_path).getOpenFileName()[0]
        last_open_directory = fp

        if fp:
            self.on_push_reset_button()
            selected_file_path = fp
            self.run_file_hash_thread(fp, get_hash_func())

            self.file_extension_label.setText(fp.split('.')[-1])
            self.ui_set_compare_tip_visibility(True)

    def on_push_next_hash_button(self):
        global selected_file_path, hash_type_all, current_hash_type_index
        current_hash_type_index = (current_hash_type_index + 1) % len(hash_type_all)
        next_hash_type_index = (current_hash_type_index + 1) % len(hash_type_all)

        if selected_file_path:
            # thread part
            self.run_file_hash_thread(selected_file_path, get_hash_func())
        self.current_hash_label.setText(hash_type_all[current_hash_type_index])
        self.next_hash_label.setText(hash_type_all[next_hash_type_index])

        self.ui_set_hash_copy_info_visibility(False)
        self.ui_hide_compare_result()

    def on_clipboard_change(self):
        global current_clipboard_txt_val, clipboard_changed_from_app
        current_clipboard_txt_val = QtWidgets.QApplication.clipboard().text()

        if clipboard_changed_from_app:
            self.ui_hide_compare_result()
            self.ui_set_hash_copy_info_visibility(True)
            clipboard_changed_from_app = False
        else:
            if is_hex(current_clipboard_txt_val) and self.hash_result_label.text():
                if current_clipboard_txt_val == undo_format_hash_result(self.hash_result_label.text()):
                    self.ui_set_success_compare()
                else:
                    self.ui_set_error_compare()
                self.ui_set_compare_tip_visibility(False)
                self.ui_set_hash_copy_info_visibility(False)

    def on_push_reset_button(self):
        global selected_file_path
        selected_file_path = None
        _translate = QtCore.QCoreApplication.translate

        self.file_extension_label.setText(":)")
        self.filename_label.setText(_translate("MainWindow", "The most minimalist and smart checksum verifier ever !"))
        self.hash_result_label.setText("")

        self.ui_hide_compare_result()
        self.ui_set_hash_copy_info_visibility(False)
        self.ui_set_compare_tip_visibility(False)

    def on_push_result_label(self, ev):
        global clipboard_changed_from_app

        hash_result_val = undo_format_hash_result(self.hash_result_label.text())
        if hash_result_val:
            clipboard_changed_from_app = True
            QtWidgets.QApplication.clipboard().setText(hash_result_val)


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        app_width, app_height = 801, 600

        MainWindow.setFixedSize(app_width, app_height)

        ''' Center app on screen fuck the traditional technics '''

        qr = QtWidgets.QDesktopWidget().screenGeometry()
        left = (qr.width() // 2) - (app_width // 2)
        top = (qr.height() // 2) - (app_height // 2)
        MainWindow.setGeometry(left, top, app_width, app_height)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-1, 0, 811, 601))
        self.frame.setStyleSheet("font-family: Roboto, sans-serif, sans, Arial, Helvetica;\n"
                                 "background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.illustration_img_label = QtWidgets.QLabel(self.frame)
        self.illustration_img_label.setGeometry(QtCore.QRect(130, 160, 591, 111))
        self.illustration_img_label.setText("")
        self.illustration_img_label.setPixmap(self.app_context.people_icon)
        self.illustration_img_label.setObjectName("illustration_img_label")
        self.hash_result_label = QtWidgets.QLabel(self.frame)
        self.hash_result_label.setGeometry(QtCore.QRect(90, 340, 641, 61))
        self.hash_result_label.setStyleSheet("border-radius: 6px;\n"
                                             "border: 2px solid rgb(0, 0, 0);\n"
                                             "padding-left: 6px;\n"
                                             "padding-right: 6px;\n"
                                             "font-size: 13pt;\n"
                                             "color: rgb(0, 0, 0);\n"
                                             "font-weight: bold;")
        self.hash_result_label.setWordWrap(True)
        self.hash_result_label.setAlignment(QtCore.Qt.AlignVCenter)
        self.hash_result_label.setObjectName("hash_result_label")
        self.file_extension_label = QtWidgets.QLabel(self.frame)
        self.file_extension_label.setGeometry(QtCore.QRect(354, 10, 100, 100))
        self.file_extension_label.setStyleSheet("font-size: 15pt;\n"
                                                "background-color: rgb(0, 0, 0);\n"
                                                "color: #fff;\n"
                                                "border-radius: 50%;\n"
                                                "")
        self.file_extension_label.setAlignment(QtCore.Qt.AlignCenter)
        self.file_extension_label.setObjectName("file_extension_label")
        self.reset_button = QtWidgets.QPushButton(self.frame)
        self.reset_button.setGeometry(QtCore.QRect(100, 500, 111, 41))
        self.reset_button.setStyleSheet("\n"
                                        "QPushButton {\n"
                                        "    background-color: rgb(6, 6, 6);\n"
                                        "    color: #fff;\n"
                                        "    border-radius: 8px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: rgb(89, 89, 89);\n"
                                        "}")
        icon = QtGui.QIcon()
        icon.addPixmap(self.app_context.reset_icon, QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.reset_button.setIcon(icon)
        self.reset_button.setObjectName("reset_button")
        self.compare_tips_label = QtWidgets.QLabel(self.frame)
        self.compare_tips_label.setGeometry(QtCore.QRect(410, 510, 400, 31))
        self.compare_tips_label.setStyleSheet("font-size: 11pt;\n"
                                              "color: rgb(0, 0, 0);")
        self.compare_tips_label.setObjectName("compare_tips_label")
        self.compare_tip_icon_label = QtWidgets.QLabel(self.frame)
        self.compare_tip_icon_label.setGeometry(QtCore.QRect(380, 500, 31, 51))
        self.compare_tip_icon_label.setText("")
        self.compare_tip_icon_label.setPixmap(self.app_context.bulb_icon)
        self.compare_tip_icon_label.setObjectName("compare_tip_icon_label")
        self.compare_result_label = QtWidgets.QLabel(self.frame)
        self.compare_result_label.setGeometry(QtCore.QRect(90, 30, 111, 41))
        self.compare_result_label.setStyleSheet("font-size: 12pt;\n"
                                                "color: rgb(95, 211, 141);\n"
                                                "font-weight: bold;\n"
                                                "")
        self.compare_result_label.setObjectName("compare_result_label")
        self.import_button = QtWidgets.QPushButton(self.frame)
        self.import_button.setGeometry(QtCore.QRect(350, 430, 111, 41))
        self.import_button.setStyleSheet("\n"
                                         "QPushButton {\n"
                                         "    background-color: rgb(6, 6, 6);\n"
                                         "    color: #fff;\n"
                                         "    border-radius: 8px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton:hover {\n"
                                         "    background-color: rgb(89, 89, 89);\n"
                                         "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(self.app_context.import_icon, QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.import_button.setIcon(icon1)
        self.import_button.setObjectName("import_button")
        self.compare_result_icon = QtWidgets.QLabel(self.frame)
        self.compare_result_icon.setGeometry(QtCore.QRect(200, 30, 41, 31))
        self.compare_result_icon.setText("")
        self.compare_result_icon.setPixmap(self.app_context.checked_icon)
        self.compare_result_icon.setObjectName("compare_result_icon")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(570, 570, 231, 21))
        self.label.setStyleSheet("font-size: 12px;")
        self.label.setObjectName("label")
        self.current_hash_label = QtWidgets.QLabel(self.frame)
        self.current_hash_label.setGeometry(QtCore.QRect(90, 290, 71, 31))
        self.current_hash_label.setStyleSheet("font-size: 13pt;\n"
                                              "color: rgb(0, 0, 0);\n"
                                              "font-weight: bold;")
        self.current_hash_label.setObjectName("current_hash_label")
        self.next_hash_label = QtWidgets.QLabel(self.frame)
        self.next_hash_label.setGeometry(QtCore.QRect(658, 290, 71, 41))
        self.next_hash_label.setStyleSheet("font-size: 13pt;\n"
                                           "color: rgb(0, 0, 0);\n"
                                           "font-weight: bold;")
        self.next_hash_label.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.next_hash_label.setObjectName("next_hash_label")
        self.next_hash_button = QtWidgets.QPushButton(self.frame)
        self.next_hash_button.setGeometry(QtCore.QRect(370, 290, 61, 36))
        self.next_hash_button.setStyleSheet("\n"
                                            "QPushButton {\n"
                                            "    background-color: rgb(255, 255, 255);\n"
                                            "    border: 0 solid none;\n"
                                            "}\n"
                                            "\n"
                                            "\n"
                                            "QPushButton:hover {\n"
                                            "    background-color: rgb(237, 237, 237);\n"
                                            "}")
        self.next_hash_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(self.app_context.swap_icon, QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.next_hash_button.setIcon(icon2)
        self.next_hash_button.setObjectName("next_hash_button")
        self.filename_label = QtWidgets.QLabel(self.frame)
        self.filename_label.setGeometry(QtCore.QRect(64, 130, 681, 20))
        self.filename_label.setStyleSheet("font-weight: bold;\n"
                                          "color: rgb(138, 146, 167);")
        self.filename_label.setAlignment(QtCore.Qt.AlignCenter)
        self.filename_label.setObjectName("filename_label")
        self.hash_copy_info = QtWidgets.QLabel(self.frame)
        self.hash_copy_info.setGeometry(QtCore.QRect(540, 40, 201, 31))
        self.hash_copy_info.setStyleSheet("font-weight: bold;\n"
                                          "color: rgb(138, 146, 167);")
        self.hash_copy_info.setAlignment(QtCore.Qt.AlignCenter)
        self.hash_copy_info.setObjectName("hash_copy_info")

        ''' Connected slots to buttons  '''
        self.reset_button.clicked.connect(self.on_push_reset_button)
        self.import_button.clicked.connect(self.on_push_import_button)
        self.next_hash_button.clicked.connect(self.on_push_next_hash_button)
        self.hash_result_label.mouseReleaseEvent = self.on_push_result_label
        QtWidgets.QApplication.clipboard().dataChanged.connect(self.on_clipboard_change)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "KaHaShEr"))
        self.hash_result_label.setText(
            _translate("MainWindow", ""))
        self.file_extension_label.setText(_translate("MainWindow", ":)"))
        self.reset_button.setText(_translate("MainWindow", "Reset"))
        self.compare_tips_label.setText(
            _translate("MainWindow", "Copy the hash value in the clipboard to compare"))
        self.compare_result_label.setText(_translate("MainWindow", ""))
        self.import_button.setText(_translate("MainWindow", "Import"))
        self.label.setText(_translate("MainWindow", "© 2020 Copyright | Abdoulaye Koumare"))
        self.current_hash_label.setText(_translate("MainWindow", "MD5"))
        self.next_hash_label.setText(_translate("MainWindow", "SHA1"))
        self.filename_label.setText(
            _translate("MainWindow", "The most minimalist and smartest checksum verifier ever !"))
        self.hash_copy_info.setText(_translate("MainWindow", "Successfully copied!"))
        self.hash_copy_info.setVisible(False)
        self.compare_result_icon.setVisible(False)

        self.ui_set_compare_tip_visibility(False)
        self.hash_result_label.setToolTip("Click to copy the content")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
